function main_CR_temperature_sweep()
    % Инициализация оборудования
    addpath('core');
    addpath('hardware');
    addpath('adlink');
    adc = PCIe_9852_2CH_INIT(-1);
    tbox = GetTBOX();
    clkg = GetCLOCKGEN();
    
    % Параметры эксперимента
    N = 100; % number of reflectograms per temperature
    L_m = 500; % fiber length in m
    T_max = 2000; % максимальная температура
    T_step = 1; % шаг температуры
    temperatures = -T_max:T_step:T_max; % диапазон температур
    
    % Параметры для проверки температуры
    max_temp_retries = 10; % максимальное число попыток установки температуры
    temp_tolerance = 0; % допустимое отклонение температуры, 
    stabilization_time = 0; % время стабилизации температуры, секунды
    
    % Создание папки для данных
    CR = 'CR13'; % declare folder for experiment
    folder = datestr(now,'yyyy-mm-dd_HHMM');
    dir_dat = fullfile('test_data', CR, folder);
    if ~exist(dir_dat, 'dir'); mkdir(dir_dat); end
    
    % Предварительное выделение памяти
    all_traces = cell(length(temperatures), 1);
    measured_temps = zeros(length(temperatures), 1);
    temp_retry_counts = zeros(length(temperatures), 1);
    
    fprintf('Начинаем эксперимент с температурным сканированием...\n');
    fprintf('Диапазон температур: от %d до %d с шагом %d\n', -T_max, T_max, T_step);
    fprintf('Допуск температуры: ±%.1f\n', temp_tolerance);
    
    % Главный цикл по температурам
    for i = 1:length(temperatures)
        target_temp = temperatures(i);
        temp_ok = false;
        temp_retry = 1;
        
        % Цикл установки и проверки температуры
        while temp_retry <= max_temp_retries && ~temp_ok
            % Установка температуры
            fprintf('Устанавливаем температуру: %d (попытка %d/%d)\n', ...
                    target_temp, temp_retry + 1, max_temp_retries);
            ComSet(tbox, 0, target_temp);
            
            % Ждем стабилизации температуры
            fprintf('Ждем стабилизации температуры (%d сек)...\n', stabilization_time);
            pause(stabilization_time);
            
            % Проверяем текущую температуру
            current_temp_str = ComGet(tbox, 20);
            % Парсим строку "D 0 X.X" чтобы получить числовое значение
            temp_parts = strsplit(current_temp_str);
            if length(temp_parts) >= 3
                measured_temp = str2double(temp_parts{3});
                fprintf('Измеренная температура: %.1f\n', measured_temp);
                
                % Проверяем соответствие температуры
                if abs(measured_temp - target_temp) <= temp_tolerance
                    temp_ok = true;
                    measured_temps(i) = measured_temp;
                    fprintf('Температура установлена корректно\n');
                else
                    fprintf('Температура не соответствует: отклонение %.1f\n', ...
                            abs(measured_temp - target_temp));
                    temp_retry = temp_retry + 1;
                    
                    if temp_retry > max_temp_retries
                        fprintf('Достигнут лимит попыток. Используем текущую температуру.\n');
                        measured_temps(i) = measured_temp;
                        temp_ok = true; % все равно продолжаем
                    else
                        % Увеличиваем время ожидания при повторных попытках
                        extra_wait = 1;
                        fprintf('Ждем дополнительно %d сек...\n', extra_wait);
                        pause(extra_wait);
                    end
                end
            else
                fprintf('Не удалось прочитать температуру. Попытка %d/%d\n', ...
                        temp_retry + 1, max_temp_retries);
                temp_retry = temp_retry + 1;
                
                if temp_retry > max_temp_retries
                    fprintf('Достигнут лимит попыток. Используем целевую температуру.\n');
                    measured_temps(i) = target_temp;
                    temp_ok = true; % все равно продолжаем
                end
            end
        end
        
        temp_retry_counts(i) = temp_retry;
        
        % Съёмка рефлектограмм для текущей температуры
        fprintf('Снимаем %d рефлектограмм...\n', N);
        [traces, z] = cr_get_reflectograms_ch1(N, L_m, adc);
        
        % Сохраняем данные
        all_traces{i} = traces;
        
        % Автосохранение после каждого шага
        save(fullfile(dir_dat, sprintf('temp_%d_data.mat', target_temp)), ...
             'traces', 'z', 'target_temp', 'measured_temp', 'N', 'L_m', ...
             'temp_retry', 'temp_tolerance');
        
        fprintf('Данные для температуры %d (измерено: %.1f) сохранены.\n\n', ...
                target_temp, measured_temps(i));
    end
    
    % Остановка оборудования
    PCIe_9852_2CH_STOP(adc);
    
    % Создание общего массива данных для тепловой карты
    create_temperature_heatmap(all_traces, z, temperatures, measured_temps, dir_dat);
    
    % Сохранение всех данных с информацией о попытках
    save(fullfile(dir_dat, 'full_experiment_data.mat'), ...
         'all_traces', 'z', 'temperatures', 'measured_temps', ...
         'temp_retry_counts', 'temp_tolerance', 'N', 'L_m');
    
    % Создание отчета о качестве установки температуры
    create_temperature_quality_report(temperatures(:), measured_temps(:), temp_retry_counts(:), temp_tolerance, pwd)
    
    fprintf('Эксперимент завершен! Данные сохранены в: %s\n', dir_dat);
end

function create_temperature_quality_report(target_temps, measured_temps, retry_counts, tolerance, save_dir)
    % Создание отчета о качестве установки температуры
    figure('Position', [100, 100, 1200, 800]);
    
    % График отклонения температуры
    subplot(2, 2, 1);
    temp_errors = abs(measured_temps - target_temps);
    plot(target_temps, temp_errors, 'o-', 'LineWidth', 1, 'MarkerSize', 3);
    hold on;
    yline(tolerance, 'r--', 'Допуск', 'LineWidth', 2);
    xlabel('Целевая температура');
    ylabel('Отклонение');
    title('Отклонение измеренной температуры от целевой');
    grid on;
    legend('Отклонение', 'Допуск');
    
    % График числа попыток
    subplot(2, 2, 2);
    stem(target_temps, retry_counts, 'filled', 'MarkerSize', 3);
    xlabel('Целевая температура');
    ylabel('Число попыток');
    title('Число попыток установки температуры');
    grid on;
    
    % Статистика
    subplot(2, 2, 3);
    within_tolerance = temp_errors <= tolerance;
    success_rate = mean(within_tolerance) * 100;
    
    bar([mean(temp_errors), max(temp_errors), success_rate]);
    set(gca, 'XTickLabel', {'Среднее отклонение', 'Макс отклонение', 'Успешных, %'});
    ylabel('Значение');
    title('Статистика установки температуры');
    grid on;
    
    % Текстовая информация
    subplot(2, 2, 4);
    axis off;
    text(0.1, 0.9, sprintf('Статистика температуры:'), 'FontSize', 12, 'FontWeight', 'bold');
    text(0.1, 0.7, sprintf('Допуск: ±%.1f', tolerance));
    text(0.1, 0.6, sprintf('Среднее отклонение: %.2f', mean(temp_errors)));
    text(0.1, 0.5, sprintf('Максимальное отклонение: %.2f', max(temp_errors)));
    text(0.1, 0.4, sprintf('Успешных установок: %.1f%%', success_rate));
    text(0.1, 0.3, sprintf('Всего попыток: %d', sum(retry_counts)));
    text(0.1, 0.2, sprintf('Макс попыток для одной точки: %d', max(retry_counts)));
    
    saveas(gcf, fullfile(save_dir, 'temperature_quality_report.png'));
    saveas(gcf, fullfile(save_dir, 'temperature_quality_report.fig'));
    
    % Сохранение CSV с данными
    temp_data = table(target_temps', measured_temps, temp_errors, retry_counts, within_tolerance, ...
                     'VariableNames', {'TargetTemp', 'MeasuredTemp', 'Error', 'RetryCount', 'WithinTolerance'});
    writetable(temp_data, fullfile(save_dir, 'temperature_control_data.csv'));
end

function create_temperature_heatmap(all_traces, z, target_temps, measured_temps, save_dir)
    % Создание тепловой карты
    
    % Вычисляем средние трассы для каждой температуры
    mean_traces = zeros(length(z), length(target_temps));
    for i = 1:length(target_temps)
        mean_traces(:, i) = mean(all_traces{i}, 2);
    end
    
    % Создаем фигуру
    figure('Position', [100, 100, 1200, 800]);
    
    % Тепловая карта
    subplot(2, 2, [1, 3]);
    imagesc(target_temps, z, mean_traces);
    xlabel('Температура');
    ylabel('Длина, м');
    title('Тепловая карта рефлектограмм');
    colorbar;
    axis xy;
    colormap('jet');
    
    % График зависимости от температуры в выбранной точке
    subplot(2, 2, 2);
    point_idx = round(length(z)/2); % середина волокна
    plot(target_temps, mean_traces(point_idx, :), 'o-', 'LineWidth', 2);
    xlabel('Температура');
    ylabel('Амплитуда, В');
    title(sprintf('Зависимость в точке z=%.1f м', z(point_idx)));
    grid on;
    
    % График нескольких трасс при разных температурах
    subplot(2, 2, 4);
    temp_indices = [1, round(length(target_temps)/2), length(target_temps)];
    colors = ['r', 'g', 'b'];
    hold on;
    for i = 1:length(temp_indices)
        idx = temp_indices(i);
        plot(z, mean_traces(:, idx), colors(i), 'LineWidth', 1.5, ...
            'DisplayName', sprintf('T=%d', target_temps(idx)));
    end
    hold off;
    xlabel('Длина, м');
    ylabel('Амплитуда, В');
    title('Рефлектограммы при разных температурах');
    legend;
    grid on;
    
    % Сохранение графиков
    saveas(gcf, fullfile(save_dir, 'temperature_heatmap.png'));
    saveas(gcf, fullfile(save_dir, 'temperature_heatmap.fig'));
end